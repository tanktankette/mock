/*
  Video:
    This component connects to a room on Twilio with props.sid, sets up all of the event triggers,
    and starts creates a Participant component for every participant in the room.
    Eventually this component will also manage which participant is the gets to be front and
    center as the primary participant, but currently whichever participant is first is always
    primary.
    Props:
      sid (required):
        The sid of the room used to connect to it on Twilio
      token (required):
        A token generated by the back end that is used to authorize the connection to the room
*/
import React, { Component } from 'react'
import styled from 'react-emotion'
import Participant from './Participant'
const { connect } = require('twilio-video')

const Container = styled('div')`
  position: absolute;
  height: 100%;
  width: 100%;
`

const Callers = styled('div')`
  position: absolute;
  bottom: 20px;
  width: 95vw;
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  height: 100px;
`

export default class Video extends Component {
  constructor (props) {
    super(props)
    this.state = {
      room: null,
      participants: null,
      localVideo: true,
      localAudio: true,
      disconnected: false
    }
    this.roomJoined = this.roomJoined.bind(this)
  }

  componentDidMount () {
    connect(this.props.token, {
      name: this.props.sid,
      video: this.state.localVideo,
      audio: this.state.localAudio
    })
      .then(this.roomJoined)
      .catch(console.log)
  }

  roomJoined (room) {
    console.log('connected')
    this.setState({
      room: room,
      participants: room.participants
    })

    room.on('participantConnected', participant => {
      let newParticpants = this.state.participants
      newParticpants.set(participant.sid, participant)
      this.setState({participants: newParticpants})
      console.log("Joining: '" + participant.identity + "'")
    })

    room.on('participantDisconnected', participant => {
      let newParticpants = this.state.participants
      newParticpants.delete(participant.sid)
      this.setState({participants: newParticpants})
      console.log("Participant '" + participant.identity + "' left the room")
    })

    room.on('disconnected', (room, error) => {
      console.log(error)
    })
  }

  componentWillUnmount () {
    if (this.state.room) this.state.room.disconnect()
  }

  render () {
    let participants
    let primary
    if (this.state.participants) {
      participants = Array.from(this.state.participants.values()).map((participant, i) => {
        return <Participant primary={i === 0} participant={participant} key={participant.identity} />
      })
      primary = participants.shift()
      console.log(primary)
    }
    return (
      <Container>
        {primary}
        <Callers>
          {participants}
        </Callers>
      </Container>
    )
  }
}

// disconnect on leaving page
